[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # Start bed heating
  M140 S{BED_TEMP}
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Use absolute coordinates
  G90
  # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.0
  # Home the printer
  G28
  G4 P1000
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  ADAPTIVE_PURGE


[gcode_macro END_PRINT]
gcode:
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  # Move nozzle away from print while retracting
  G91
  G1 X0 Y20 E-1 F300
  # Raise nozzle by 10mm
  G1 Z10 F3000
  G90
  # Disable steppers
  M84


[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_tip_distance: 15            # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 15           # Amount of filament to purge
variable_flow_rate: 10              # Desired flow rate in mm3/s
variable_x_default: 10              # X location to purge, overwritten if adaptive is True
variable_y_default: 10              # Y location to purge, overwritten if adaptive is True
variable_size: 20                   # Size of the logo
variable_distance_to_object_x: 15   # Distance in x to the print area
variable_distance_to_object_y: 0    # Distance in y to the print area
variable_travel_speed: 300          # Travel speed
gcode:
      {% if adaptive_enable == True %}
          {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
          {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
          {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
          {% set x_origin = ([x_origin, 0] | max) %}
          {% set y_origin = ([y_origin, 0] | max) %}
      {% else %}
          {% set x_origin = x_default | float %}
          {% set y_origin = y_default | float %}
      {% endif %}
      {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
      {% set prepurge_speed = flow_rate / 2.405 %}
      { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
      G92 E0
      G0 F{travel_speed*60}                                                               # Set travel speed
      G90                                                                                 # Absolute positioning
      G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
      G0 Z{z_height}                                                                      # Move to purge Z height
      M83                                                                                 # Relative extrusion mode
      G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
      G1 X{x_origin+size*0.285} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo                                                                  
      G1 X{x_origin+size*0.789} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge second line of logo
      G1 X{x_origin+size*0.250} Y{y_origin} E{purge_amount/4} F{purge_move_speed*60}      # Purge third line of logo
      G1 X{x_origin+size*0.711} Y{y_origin} E{purge_amount/4} F{purge_move_speed*60}      # Purge fourth line of log
      G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge fifth line of logo
      G1 X{x_origin+size*0.80} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge sixth line of logo
      G1 E-0.5 F2100                                                                       # Retract
      G92 E0       


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
